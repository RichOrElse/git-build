#!/bin/sh

APP_NAME="git-build"
APP_VERSION="v1.0.0"

function die {
  if [ -z "$1" ]; then
    echo "$APP_NAME $APP_VERSION"
    echo "================"
    echo "Usage: git-build [-a|--action <create|append>] [-b|--branch <hotfix|release|stage>] [-f|--flag <flag>] [-v|--version <version>]"
    echo ""
    echo "  -a|--action string"
    echo "\tOperation to perform: append, create (REQUIRED)"
    echo "  -b|--branch string"
    echo "\tType of branch to build: hotfix, release, stage (REQUIRED)"
    echo "  -f|--flag integer"
    echo "\tIncrementing flag (non-zero REQUIRED for hotfix, default: 0)"
    echo "  -v|--version yy.m.d"
    echo "\tOptional, version number (default: current date for hotfix and stage, next Monday for release)"
    echo ""
  else
    log_error $@
  fi

  exit 1
}

function execute {
  log_info $@

  raw_output=`$@ 2>&1`
  return_code=$?

  while read -r line_output; do
    log_debug $line_output
  done <<< "$raw_output"
}

function execute_or_die {
  execute $@
  if [ $return_code -ne 0 ]; then
    die "Git error! (status code: $?)"
  fi
}

function initialize_files {
  CLEANUP_FILE="cleanup-$BRANCH-$VERSION.sh"
  >> $CLEANUP_FILE # Create the cleanup file, if it does not yet exist
  chmod +x $CLEANUP_FILE

  LOG_FILE="$BRANCH-$VERSION.log"
  >> $LOG_FILE # Create the log file, if it does not yet exist

  if [ $ACTION = "append" ]; then
    local action="Appending to"
  elif [ $ACTION = "create" ]; then
    local action="Creating"
  fi

  log_info "# $action $BUILD_BRANCH via $APP_NAME $APP_VERSION"
}

function initialize_local_branches {
  log_info "# Cleaning / setting up local branches"

  if [ $ACTION = "append" ]; then
    execute_or_die "git checkout $BUILD_BRANCH"
  elif [ $ACTION = "create" ]; then
    if [ "$BRANCH" = "hotfix" ]; then
      execute_or_die "git checkout develop"
      execute "git branch -D master"

      execute_or_die "git checkout master"
      execute_or_die "git checkout -b $BUILD_BRANCH"
    else
      execute_or_die "git checkout master"
      execute "git branch -D develop"

      execute_or_die "git checkout develop"
      execute_or_die "git checkout -b $BUILD_BRANCH"
    fi
  fi

  for branch in $FEATURE_BRANCHES; do
    execute "git branch -D $branch"
    execute_or_die "git checkout $branch"
  done
}

function log_cleanup {
  echo $@ >> $CLEANUP_FILE
}

function log_debug {
  echo "\x1B[90m[DEBUG] git-build>    $@\x1B[39m" | tee -a $LOG_FILE
}

function log_error {
  echo "\x1B[31m[ERROR] git-build> $@\x1B[39m" | tee -a $LOG_FILE
}

function log_info {
  echo "[INFO ] git-build> $@" | tee -a $LOG_FILE
}

function log_warn {
  echo "\x1B[31m[WARN ] git-build> $@\x1B[39m" | tee -a $LOG_FILE
}

function merge_or_abort {
  log_info "# Merging $1 to $2"
  execute_or_die "git checkout $2"
  execute "git merge --no-edit --no-ff $1"

  if [ $return_code -ne 0 ]; then
    log_warn "# Merge conflict detected for $1"
    execute_or_die "git merge --abort"
    log_info ""

    UNMERGED_BRANCHES+=($1)
    merge_success=false
  else
    log_info "# Successfully merged $1 to $2"
    log_info ""

    MERGED_BRANCHES+=($1)
    merge_success=true
  fi
}

function parse_cli_arguments {
  ACTION=""
  BRANCH=""
  FLAG=0
  INPUT_FILE=""
  VERSION=""

  while [[ $# -gt 0 ]]
  do
    key="$1"

    case $key in
      -a|--action)
        if [ -z $ACTION ]; then
          ACTION="$2"
        else
          ACTION=""
        fi

        if [ $ACTION != "append" ] && [ $ACTION != "create" ]; then
          die
        fi

        shift
        ;;
      -b|--branch)
        if [ -z $BRANCH ]; then
          BRANCH="$2"
        else
          BRANCH=""
        fi

        if [ $BRANCH != "hotfix" ] && [ $BRANCH != "release" ] && [ $BRANCH != "stage" ]; then
          die
        fi

        shift
        ;;
      -f|--flag)
        if [ $FLAG -eq 0 ]; then
          FLAG="$2"
        else
          FLAG=""
        fi

        if [ -z $FLAG ]; then
          die
        fi

        shift
        ;;
      -i|--input_file)
        if [ -z $INPUT_FILE ]; then
          INPUT_FILE="$2"
        else
          INPUT_FILE=""
        fi

        if [ -z $INPUT_FILE ]; then
          die
        fi

        shift
        ;;
      -v|--version)
        if [ -z $VERSION ]; then
          VERSION="$2"
        else
          VERSION=""
        fi

        if [ -z $VERSION ]; then
          die
        fi

        shift
        ;;
      *)
        # unknown option
        ;;
    esac

    shift
  done

  if [ -z $ACTION ] || [ -z $BRANCH ]; then
    die
  fi

  if [ -z $VERSION ]; then
    if [ "$BRANCH" = "hotfix" ]; then
      # Use previous Monday, except if run on Monday after 12PM Monday, in which case, use current Monday
      local year_and_month=`date -v +12H -v -Mon +%y.%-m`
      local week_of_month=$((($(date -v +12H -v -Mon +%-d)-1)/7+1))

      VERSION="$year_and_month.$week_of_month"
    elif [ "$BRANCH" = "release" ]; then
      # Use next Monday, except if run on Monday before 12PM, in which case, use current Monday
      local year_and_month=`date -v +12H -v +Mon +%y.%-m`
      local week_of_month=$((($(date -v +12H -v +Mon +%-d)-1)/7+1))

      FLAG=0 # always ignore flag for release branches
      VERSION="$year_and_month.$week_of_month"
    elif [ "$BRANCH" = "stage" ]; then
      VERSION=`date +%y.%-m.%-d`
    fi
  fi

  if [ $FLAG -ne 0 ]; then
    VERSION="$VERSION.$FLAG"
  elif [ "$BRANCH" = "hotfix" ]; then
    die
  fi

  BUILD_BRANCH="$BRANCH/$VERSION"
}

function parse_feature_branches {
  # Get input file, if applicable; generate one, otherwise.
  if [ -z $INPUT_FILE]; then
    INPUT_FILE="feature-branches-$BRANCH-$VERSION.txt"
    echo "" > $INPUT_FILE
    echo "# Please enter the list of feature branches to be deployed." >> $INPUT_FILE
    echo "# Lines starting with '#' will be ignored, and an empty message aborts the script." >> $INPUT_FILE
    vi $INPUT_FILE

    log_cleanup "rm -f $INPUT_FILE"
  fi

  FEATURE_BRANCHES=`sed 's/#.*$//' $INPUT_FILE | grep -E -v "^[[:space:]]*$" | awk '{print $1}'`
  if [ -z "$FEATURE_BRANCHES" ]; then
    die "No feature branches found!"
  fi
}

function rebase_and_merge_or_abort {
  log_info "# Rebasing $1 to $2"
  execute_or_die "git checkout $1"
  execute "git rebase $2"

  if [ $return_code -ne 0 ]; then
    log_warn "# Rebase conflict detected for $1"
    execute_or_die "git rebase --abort"
    log_info ""

    UNREBASED_BRANCHES+=($1)
  else
    log_info "# Successfully rebased $1 to $2"
    log_info ""

    merge_or_abort $1 $2

    if [ "$merge_success" = true ]; then
      execute_or_die "git push --force-with-lease origin $1"
    fi
  fi
}

function show_cleanup {
  local branch random=$(( $RANDOM % 3 ))

  log_cleanup "git checkout develop"

  for branch in $FEATURE_BRANCHES; do
    log_cleanup "git branch -D $branch"
  done

  log_cleanup "git branch -D $BUILD_BRANCH"
  log_cleanup "rm $CLEANUP_FILE"

  log_info "# Undo or cleanup this build with the following command:"
  log_info "#   ./$CLEANUP_FILE"
  log_info ""

  if [ $random -eq 1 ]; then
    log_info "# May the odds be ever in your favor!"
  elif [ $random -eq 2 ]; then
    log_info "# May the force be with you!"
  else
    log_info "# Good luck, soldier!"
  fi
}

function show_finale {
  if [ ${#MERGED_BRANCHES[@]} -eq 0 ]; then
    log_warn "# Achievement unlocked: ALL PULL REQUESTS FAILED!!!"
    log_warn ""
  elif [ "$BRANCH" = "stage" ]; then
    if [ ${#UNMERGED_BRANCHES[@]} -gt 0 ]; then
      log_warn "# Complete this build with the following commands:"
      log_warn "#   git checkout $BUILD_BRANCH"

      for branch in ${UNMERGED_BRANCHES[@]}; do
        log_warn "#   git merge --no-edit --no-ff $branch"
      done

      log_warn "#   git push origin $BUILD_BRANCH"
      log_warn ""
    fi
  else
    if [ ${#UNMERGED_BRANCHES[@]} -ne 0 ] || [ ${#UNREBASED_BRANCHES[@]} -ne 0 ]; then
      log_warn "# Complete this build with the following commands:"

      for branch in ${UNMERGED_BRANCHES[@]}; do
        log_warn "#   git checkout $BUILD_BRANCH"
        log_warn "#   git merge --no-edit --no-ff $branch"
        log_warn "#   git checkout $branch"
        log_warn "#   git push --force-with-lease origin $branch"
        log_warn "#"
      done

      for branch in ${UNREBASED_BRANCHES[@]}; do
        log_warn "#   git checkout $branch"
        log_warn "#   git rebase $BUILD_BRANCH"
        log_warn "#   git push --force-with-lease origin $branch"
        log_warn "#   git checkout $BUILD_BRANCH"
        log_warn "#   git merge --no-edit --no-ff $branch"
        log_warn "#"
      done

      log_warn "#   git checkout $BUILD_BRANCH"
      log_warn "#   git push origin $BUILD_BRANCH"
    fi

    if [ "$BRANCH" = "hotfix" ]; then
      log_info "# Before deploying for testing, execute the following commands:"
      log_info "#   git checkout develop"
      log_info "#   git merge --no-edit --no-ff $BUILD_BRANCH"
      log_info "#   git push origin develop"
      log_info "#"

      log_info "# Before deploying for production, execute the following commands:"
      log_info "#   git checkout master"
      log_info "#   git merge --no-edit --no-ff $BUILD_BRANCH"
      log_info "#   git push origin master"
      log_info "#"
    elif [ "$BRANCH" = "release" ]; then
      log_info "# Before deploying for production, execute the following commands:"
      log_info "#   git checkout develop"
      log_info "#   git merge --no-edit --no-ff $BUILD_BRANCH"
      log_info "#   git push origin develop"
      log_info "#"
      log_info "#   git checkout master"
      log_info "#   git merge --no-edit --no-ff $BUILD_BRANCH"
      log_info "#   git push origin master"
      log_info "#"
      log_info "#   git tag $VERSION"
      log_info "#   git push origin $VERSION"
    fi
  fi
}

function show_merge_conflicts {
  local branch
  if [ ${#UNMERGED_BRANCHES[@]} -gt 0 ]; then
    log_warn "# The following branches have NOT been merged to $BUILD_BRANCH:"
    for branch in ${UNMERGED_BRANCHES[@]}; do
      log_warn "#   $branch"
    done
    log_warn ""
  fi
}

function show_rebase_conflicts {
  local branch
  if [ ${#UNREBASED_BRANCHES[@]} -gt 0 ]; then
    log_warn "# The following branches have NOT been rebased to $BUILD_BRANCH:"
    for branch in ${UNREBASED_BRANCHES[@]}; do
      log_warn "#   $branch"
    done
    log_warn ""
  fi
}

parse_cli_arguments $@
initialize_files

execute_or_die "git fetch origin"
count=`git branch -a | grep -c $BUILD_BRANCH`

if [ $ACTION = "append" ] && [ $count -eq 0 ]; then
  die "Cannot append to non-existent branch: $BUILD_BRANCH"
elif [ $ACTION = "create" ] && [ $count -ne 0 ]; then
  die "Cannot create already-existing branch: $BUILD_BRANCH"
fi

parse_feature_branches $@
initialize_local_branches

MERGED_BRANCHES=()
UNMERGED_BRANCHES=()
UNREBASED_BRANCHES=()

if [ "$BRANCH" = "stage" ]; then
  for branch in $FEATURE_BRANCHES; do
    merge_or_abort $branch $BUILD_BRANCH
  done
else
  for branch in $FEATURE_BRANCHES; do
    rebase_and_merge_or_abort $branch $BUILD_BRANCH
  done
fi

execute_or_die "git push origin $BUILD_BRANCH"

show_rebase_conflicts
show_merge_conflicts
show_finale
show_cleanup
